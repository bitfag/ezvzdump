#!/bin/bash

# vim: set ts=2 expandtab :
# usage: ezvzdump [-c config_file ] [ -s backup_set]


#not used yet
function yesno_step() {
  #$1 -> Question
  #$2 -> all answers
  #$3 -> positive answers 
  #$4 -> default option
  if [ -n "${INTERACTIVE}" ]; then
    echo -n $1 
    for a in $2; do
      echo -n "$a "
    done
    local answer
    read answer
    [ -n "${answer}" ] || answer=$4
    if inList answer $3; then
      return 0
    else
      return 1
    fi
  fi
}

function e {
  echo -e $(date "+%F %T"):  $1
}

function email_file() {
  cat $1 | mail -s "`hostname` VZ backup statistics." ${MAIL_NOTIFY}
}

function log {
  if  [ -n "${2}" ] && isNumber "${2}" && [ "${2}" -ne "0" ]; then
    e "ERROR: ${1}\t Returned ${2}"
    e "ERROR: ${1}\t Returned ${2}" >> $LOG_FILE
    return
  fi
  e "$1" 
  e "$1" >> $LOG_FILE
}

function die {
  e "Error: $1" >&2
  #local answer
  #if yesno_step "Do you want to continue anyway?"; then
  #  return 
  #else
    exit 1;
  #fi
}

function toUpper() {
  echo "$1" | tr "[:lower:]" "[:upper:]" 
}

function isNumber() {
  [ $1 -eq $1 ] 2>/dev/null
}

function removeNewLine() {
  echo -n "$1" | tr -d '\n'
}

function inList() {
  for item in $2; do
    if [ "$1" = "$item" ]; then
      return 0
    fi
  done
    return 1
}

function count_lines() {
  local ln
  ln=0
  echo ""
  if [ -n "${2}" ] && isNumber "${2}"; then
    while read line
    do
      ln=$((ln+1));
      echo -n -e "\t\t\rProgress: $(((ln*100)/$2))%. ${1}: ${ln}."
    done
  else
    while read line
    do
      ln=$((ln+1));
      echo -n -e "\t\t\r${ln} ${1}."
    done
  fi
  echo -e "${ln} ${1}. Finished\t\t\t\n"
}

function check_only_instance() {
  # Check no other instance of this script is running
  if [ -e $PID_FILE ]; then
    pid=`cat ${PID_FILE}`
    if kill -0 ${pid} > /dev/null 2>&1; then
      echo -n ${pid}
      return 1
    else
      rm ${PID_FILE}
    fi
  fi
  echo $$ > ${PID_FILE}
  return 0
}

function umount_actions() {
  umount ${mountpoint}
  log "umounted ${mountpoint}" $?
  [ "$(ls -A ${mountpoint})" ] || rm -rf "${mountpoint}"
  lvremove -f ${LVM_GROUP}/${snapshot_device_name}
  log "removed lvm snapshot ${snapshot_device_name}" $?
  unset mountpoint
}

function remote_execute() {
    ssh -o BatchMode=yes -o StrictHostKeyChecking=no $1 ${REMOTE_NICE:-} ${REMOTE_IONICE:-} $2
}

cleanup_handler()
{
  trap - EXIT
  # umount lvm snapshot and remove it
  if [ -n "${LVM}" -a -n "${mountpoint}" ]; then
    umount_actions
  fi
  #cleanup temporary files
  rm ${LOG_FILE}
  #cleanup pid file
  rm ${PID_FILE}
  exit "$@"
}

exit_handler()
{
  cleanup_handler $?
}

signal_handler()
{
  cleanup_handler 143
}


#default config file
if [ -f "./ezvzdump.conf" ]; then
  CONFIG_FILE="./ezvzdump.conf"
else
  CONFIG_FILE="/etc/ezvzdump.conf"
fi

#read command line arguments
while [ $# -gt 0 ]
do
    case "$1" in 
    -c) CONFIG_FILE=$2; shift;;
    -s) BACKUP_SET=$2; shift;;
    -i) INTERACTIVE="true";;
    -*)
       echo >&2 \
       "usage $0 [-c config_file] [-s backup_set]"
       exit 1;;
     *) break;;
    esac
  shift
done

#read configuration file
[ ! -f ${CONFIG_FILE} ] && die "Configuration file not found. ($CONFIG_FILE)"
e "reading configuration from ${CONFIG_FILE}"
. ${CONFIG_FILE}


# setup self running priority
if [ "MIN_PRIORITY" = "true" ]; then
  renice -n 19 -p $$
  ionice -c 3 -p $$
fi

# Make sure required variables are set
[ -d "${VZ_CONF}" ]    || die "\$VZ_CONF directory doesn't exist. ($VZ_CONF)"
[ -d "${VZ_PRIVATE}" ] || die "\$VZ_PRIVATE directory doesn't exist. ($VZ_PRIVATE)"
[ -n "${DEFAULT_BACKUP_SET}" ]  || die "\$DEFAULT_BACKUP_SET not set." 
[ -n "${DEFAULT_ROTATION}" ]  || die "\$DEFAULT_ROTATION not set." 
[ -n "${VEIDS_DEFAULT}" ]  || die "\$VEIDS_DEFAULT not set." 


#setup backup_set
[ -n "${BACKUP_SET}" ] ||  BACKUP_SET=${DEFAULT_BACKUP_SET}
BACKUP_SET=`toUpper ${BACKUP_SET}`
DEFAULT_BACKUP_SET_UPPER=`toUpper ${DEFAULT_BACKUP_SET}`

# Get all ids from another backup sets to form an exclude list if we're running with default backup set
if [ "${BACKUP_SET}" = "${DEFAULT_BACKUP_SET_UPPER}" ]; then
  for var in ${!VEIDS_*}; do
    [ x$var = xVEIDS_${BACKUP_SET} ] && continue
    eval v=\${$var}
    exclude_ids+=" $v"
  done
fi

# setup rotation
eval ROTATION=\${${BACKUP_SET}_ROTATION}
isNumber $ROTATION || die "Invalid Rotation Value for '${BACKUP_SET}' backup set: '$ROTATION', check configuration file."; 

#setup log file (which will be emailed)
LOG_FILE=`mktemp` 

#check there is no other backup instance running.
e "Checking this is the only backup instance running"
# Use separate pidfiles for each backup set to allow parallel execution of different sets
PID_FILE=${PID_FILE}.$BACKUP_SET
OTHER_INSTANCE=`check_only_instance` || die "Another backup is already running ${OTHER_INSTANCE}. ${?}"

# Loop through each VEID
eval VEIDS=\${VEIDS_${BACKUP_SET}}
[ -z "${VEIDS}" ] && VEIDS=${VEIDS_DEFAULT}

log "`hostname` - VZ backup for containers $VEIDS started."

#check if previous backup was interrupted
#the state file is different per backup set. it is built upon STATE_DIR + BACKUP_SET
STATE_FILE="${STATE_DIR}/${BACKUP_SET}.state"

log "checking for interrupted backups in ${STATE_FILE} ..."

if [ -f "$STATE_FILE" ]; then
  ALREADY_DONE=`cat "$STATE_FILE"`
fi
if [ -n "$ALREADY_DONE" ]; then
    log "Found. Backups already completed for VEIDS:"
    echo "$ALREADY_DONE"
else
  log "None Found."
fi
  
# install signal handler
trap exit_handler EXIT
trap signal_handler HUP PIPE INT QUIT TERM

for VEID in $VEIDS; do

  # Skip backing up VEID whether it's defined in another backup set
  if inList "$VEID" "$exclude_ids"; then
      log "$VEID is defined in another backup set, skipping"
      continue
  fi

  if [ -n "$ALREADY_DONE" ]; then
      if inList "$VEID" "$ALREADY_DONE"; then 
        log "backup for $VEID already done in last interrupted backup"
        continue
      fi
  fi

  #phase 1 backup (rsync files from vz root without suspending the container
  VEHOSTNAME=`vzlist -o hostname $VEID -H`
  echo ""
  e "Beginning backup of VEID: $VEID";

  # Build up the --exclude string for the rsync command
  RSYNC="${RSYNC_DEFAULT}"
  for path in $RSYNC_EXCLUDE; do
    RSYNC+=" --exclude=${path}"
  done;

  # Add custom --excludes
  eval e=\${EXCLUDE_${VEID}}
  if [ -n "${e}" ]; then
    for path in ${e}; do
      RSYNC+=" --exclude=${path}"
    done
  fi

  # Make rsync unattended
  export RSYNC_RSH="ssh -o StrictHostKeyChecking=no -o CheckHostIP=no -o UserKnownHostsFile=/dev/null"

  # Check that we have such VE
  if [ ! -d "${VZ_PRIVATE}${VEID}" ]; then
    log "\$VZ_PRIVATE\$VEID directory doesn't exist. (${VZ_PRIVATE}${VEID}), skipping"
    continue
  fi

  # Make sure we have needed remote dirs
  e "Creating directory for openvz private area: mkdir ${REMOTE_DIR}${VEID}/etc/vzdump"
  remote_execute "${REMOTE_USER:+$REMOTE_USER@}${REMOTE_HOST}" "[ ! -d \"${REMOTE_DIR}${VEID}\" ] &&
  mkdir -p ${REMOTE_DIR}${VEID}"

  if [ -n "${REMOTE_HOST}" ] && [ -n "${REMOTE_DIR}" ]; then
    e "Commencing initial remote ${RSYNC} ${VZ_PRIVATE}${VEID} ${REMOTE_USER:+$REMOTE_USER@}${REMOTE_HOST}:${REMOTE_DIR}${VEID}"
    ${RSYNC} ${VZ_PRIVATE}${VEID}/ ${REMOTE_USER:+$REMOTE_USER@}${REMOTE_HOST}:${REMOTE_DIR}${VEID}/ | count_lines "Files transfered"
  fi

  #phase2, checkpoint the container and sync
  #suspend
  #if lvm:
  #  take snapshot
  #  mount snapshot
  #  rsysnc snaphot
  #else:
  #  rsync vz directory

  # If the VE is running, suspend, re-rsync and then resume it ...
  if [ -n "$(${VZCTL} status ${VEID} | grep running)" ]; then
    
    if [ -n "${LVM}" -a -b "${LVM_DEVICES_PATH}/${LVM_GROUP}/${LVM_VOLUME}" ]; then
        log "using lvm snapshots"
        snapshot_device_name="ezvzdump-"`date +%Y%m%d%H%M%s`
        log "about to create snapshot ${snapshot_device_name}"
        snap_output=`lvcreate -s -L ${LVM_SNAPSHOT_SIZE} -n ${snapshot_device_name} "${LVM_DEVICES_PATH}/${LVM_GROUP}/${LVM_VOLUME}"`
        snap_return_status="$?"
        log "${snap_output}"
        log "created device ${snapshot_device_name}" ${snap_return_status}
        if [ "${snap_return_status}" -ne "0" ]; then
            log "Failed to create snapshot from ${LVM_DEVICES_PATH}/${LVM_GROUP}/${LVM_VOLUME}" "${snap_output}"
            log "### Skipping backup for VEID: ${VEID}"
        else
            mountpoint=`mktemp -d`
            log "made temporary mountpoint: ${mountpoint}" $?
            sleep 3 #XXX properly wait for the lvm device file to be created
            log "about to mount ${LVM_DEVICES_PATH}/${LVM_GROUP}/${snapshot_device_name} ${mountpoint}"
            mount ${LVM_DEVICES_PATH}/${LVM_GROUP}/${snapshot_device_name} ${mountpoint}
            log "mounted ${snapshot_device} on ${mountpoint}" $?
            VZ_SNAPSHOT_PRIVATE="${mountpoint}${VZ_PRIVATE#${LVM_MOUNTPOINT}}"
            log "initiating second phase rsync from ${VZ_SNAPSHOT_PRIVATE}${VEID} to remote ${REMOTE_DIR}"
            ${RSYNC} ${VZ_SNAPSHOT_PRIVATE}${VEID} ${REMOTE_USER:+$REMOTE_USER@}${REMOTE_HOST}:${REMOTE_DIR} | count_lines "Files remotely transfered"
            log "rsync finished." $? 
            umount_actions
        fi
    else
        e "About to suspend VEID: $VEID"
        sleep 3
        before="$(date +%s)"
        ${VZCTL} chkpnt $VEID --suspend

        log "initiating second phase rsync" 
        ${RSYNC} ${VZ_PRIVATE}${VEID} ${REMOTE_USER:+$REMOTE_USER@}${REMOTE_HOST}:${REMOTE_DIR} | count_lines "Files remotely transfered"
        log "rsync finished." $? 

        ${VZCTL} chkpnt $VEID --resume
        log "Resumed VEID: $VEID" $?
        after="$(date +%s)"
        elapsed_seconds="$(expr $after - $before)"

        log "Container ${VEID} ($VEHOSTNAME) was down $elapsed_seconds seconds during backup process." 
    fi
  else
    log  "### Skipping suspend/re-rsync/resume, as the VEID: ${VEID} is not curently running."
  fi

  # Copy VE config files over into the VE storage/cache area
  e "Creating directory for openvz config files: mkdir ${REMOTE_DIR}${VEID}/etc/vzdump"
  remote_execute "${REMOTE_USER:+$REMOTE_USER@}${REMOTE_HOST}" "[ ! -d \"${REMOTE_DIR}${VEID}/etc/vzdump\" ] &&
  mkdir -p ${REMOTE_DIR}${VEID}/etc/vzdump"

  e "Copying main config file: cp ${VZ_CONF}${VEID}.conf ${REMOTE_USER:+$REMOTE_USER@}${REMOTE_HOST}${REMOTE_DIR}${VEID}/etc/vzdump/vps.conf"
  [ ! -f "${VZ_CONF}${VEID}.conf" ] && die "Unable to find ${VZ_CONF}${VEID}.conf"
  ${RSYNC} ${VZ_CONF}${VEID}.conf ${REMOTE_USER:+$REMOTE_USER@}${REMOTE_HOST}:${REMOTE_DIR}${VEID}/etc/vzdump/vps.conf

  for ext in start stop mount umount; do
    if [ -f "${VZ_CONF}${VEID}.${ext}" ]; then
      e "Copying other config file: cp ${VZ_CONF}${VEID}.${ext} ${REMOTE_DIR}${VEID}/etc/vzdump/vps.${ext}"
      ${RSYNC} ${VZ_CONF}${VEID}.${ext} ${REMOTE_DIR}${VEID}/etc/vzdump/vps.${ext}
    fi
  done;


  # Run the remote actions
  if [ -n "${REMOTE_HOST}" ] && [ -n "${REMOTE_DIR}" ]; then

    #rotate previous remote backups
    e "rotating up to $ROTATION backups"
    for ROT in `seq $((ROTATION-1)) -1 0`; do
      remote_execute "${REMOTE_USER:+$REMOTE_USER@}${REMOTE_HOST}" "[ -f ${REMOTE_DIR}${VEID}.${BACKUP_SET}.${ROT}.tar.gz ] && mv -f ${REMOTE_DIR}${VEID}.${BACKUP_SET}.${ROT}.tar.gz ${REMOTE_DIR}${VEID}.${BACKUP_SET}.$((ROT+1)).tar.gz"
      if [ "$?" -eq 0 ]; then
        e "rotated backup ${ROT}"
      else
        e "backup ${ROT} does not exist."
      fi
    done
      #make gzipped tar backup
      if [ "${CONCURRENT_JOBS}" = "true" ]; then
    #run in background, no feedback
        e "making remote gzipped tar in backgound, no feedback"
        if [ x"${KEEP_REMOTE}" = x"true" ]; then
          remote_execute "${REMOTE_USER:+$REMOTE_USER@}${REMOTE_HOST}" "tar czf ${REMOTE_DIR}${VEID}.${BACKUP_SET}.0.tar.gz --numeric-owner -C ${REMOTE_DIR}${VEID} ./ 2>/dev/null" &
        else
          remote_execute "${REMOTE_USER:+$REMOTE_USER@}${REMOTE_HOST}" "tar czf ${REMOTE_DIR}${VEID}.${BACKUP_SET}.0.tar.gz --numeric-owner -C ${REMOTE_DIR}${VEID} ./ 2>/dev/null && rm -rf ${REMOTE_DIR}${VEID}" &
        fi
      else
      TOTAL_LINES=`remote_execute "${REMOTE_USER:+$REMOTE_USER@}${REMOTE_HOST}" "find ${REMOTE_DIR}/${VEID} | wc -l"`
    e "making remote gzipped tar backup"
    #run in foreground, percent feedback
        remote_execute "${REMOTE_USER:+$REMOTE_USER@}${REMOTE_HOST}" "tar cvzf ${REMOTE_DIR}${VEID}.${BACKUP_SET}.0.tar.gz --numeric-owner -C ${REMOTE_DIR}${VEID} ./ 2>/dev/null" | count_lines "files archived" "${TOTAL_LINES}"
        if [ x"${KEEP_REMOTE}" != x"true" ]; then
          remote_execute "${REMOTE_USER:+$REMOTE_USER@}${REMOTE_HOST}" "rm -rf ${REMOTE_DIR}${VEID}"
        fi
      fi
  fi

  e "Done."

  #add current veid to state file for future resumes.
  [ -d "${STATE_DIR}" ] || mkdir -p "${STATE_DIR}"
  echo "$VEID" >> "$STATE_FILE"

done;

log "`hostname` - VZ backup for containers $VEIDS complete!" 

#all backups finished, delete STATE_FILE for this backup set.
rm -f "$STATE_FILE"


# email log file
[ x"${ENABLE_EMAIL_REPORTS}" = x"true" ] && email_file ${LOG_FILE}
